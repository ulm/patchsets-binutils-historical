A lot of build systems use syntax such as this:
$(CC) -o /dev/null -msomeflag test.c
in order to see if the build system's toolchain supports '-msomeflag'.

On some architectures, like parisc and mips, ld cannot handle 
outputting to /dev/null and you may see crap like this:
/usr/hppa2.0-unknown-linux-gnu/bin/ld:
final link failed: Nonrepresentable section on output
collect2: ld returned 1 exit status

When ld fails to do its job, it'll clean up any intermediate files 
that it (or the compiler above it) may have generated, including 
unlinking the output file.  In this case, ld eats /dev/null and man 
it loves that shit.

So, as a very ugly hack to work around this [somewhat common] 
scenario, we add a tiny check to make sure we don't unlink our 
dear /dev/null.

--- ld/ldmain.c
+++ ld/ldmain.c
@@ -169,6 +169,7 @@
       if (output_bfd)
 	bfd_cache_close (output_bfd);
       if (delete_output_file_on_failure)
+if (strncmp(output_filename, "/dev/null", 9)) /* VERY ugly hack */
 	unlink (output_filename);
     }
 }
